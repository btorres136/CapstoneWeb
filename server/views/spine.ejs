<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!--<meta http-equiv="Content-Security-Policy" content="default-src * 'unsafe-inline' 'unsafe-eval'; img-src *">-->
    <title>Spine</title>
    <style type="text/css">
      body {
        overflow: hidden;
        margin: 0px;
        padding: 0px;
      }
    </style>
  </head>
  <body>
    <script>
      var name = "<%= Brian %>";
      console.log(name);
    </script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js"
      integrity="sha512-LF8ZB1iTwi4Qvkm4pekHG4a437Y9Af5ZuwbnW4GTbAWQeR2E4KW8WF+xH8b9psevV7wIlDMx1MH9YfPqgKhA/Q=="
      crossorigin="anonymous"
    ></script>
    <script type="module">
      import * as THREE from "./js/three/build/three.module.js";
      import { GLTFLoader } from "./js/three/examples/jsm/loaders/GLTFLoader.js";

      var spine;
      const scene = new THREE.Scene();
      const light = new THREE.DirectionalLight("#ffffff", 0.9);
      light.position.set(-20, 0, 100);
      scene.add(light);
      const camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000
      );
      camera.position.z = 10;
      camera.position.y = 6;
      const renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: true,
      });
      renderer.setClearColor("#000");
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      //var controls = new OrbitControls(camera, renderer.domElement);
      var loader = new GLTFLoader();
      window.addEventListener("resize", () => {
        renderer.setSize(window.innerWidth, window.innerHeight);
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
      });

      loader.load(
        "./models/spine.glb",
        function (gltf) {
          spine = gltf.scene;
          scene.add(gltf.scene);
        },
        undefined,
        function (error) {
          console.error(error);
        }
      );
      var bones = {
        bone0: 0,
        bone1: 0,
        bone2: 0,
        bone3: 0,
        bone4: 0,
        bone5: 0,
        bone6: 0,
        bone7: 0,
        bone8: 0,
      };

      var datGui = new dat.GUI();
      var folder1 = datGui.addFolder("Bones");
      folder1.add(bones, "bone0", -100, 100, 0.1);
      folder1.add(bones, "bone1", -100, 100, 0.1);
      folder1.add(bones, "bone2", -100, 100, 0.1);
      folder1.add(bones, "bone3", -100, 100, 0.1);
      folder1.add(bones, "bone4", -100, 100, 0.1);
      folder1.add(bones, "bone5", -100, 100, 0.1);
      folder1.add(bones, "bone6", -100, 100, 0.1);
      folder1.add(bones, "bone7", -100, 100, 0.1);
      folder1.add(bones, "bone8", -100, 100, 0.1);

      function render() {
        if (spine) {
          spine.rotation.y += 0.002;
        }
        scene.traverse((child) => {
          if (child instanceof THREE.SkinnedMesh) {
            child.skeleton.bones[0].rotation.z = bones.bone0;
            child.skeleton.bones[1].rotation.z = bones.bone1;
            child.skeleton.bones[2].rotation.z = bones.bone2;
            child.skeleton.bones[3].rotation.z = bones.bone3;
            child.skeleton.bones[4].rotation.z = bones.bone4;
            child.skeleton.bones[5].rotation.z = bones.bone5;
            child.skeleton.bones[6].rotation.z = bones.bone6;
            child.skeleton.bones[7].rotation.z = bones.bone7;
            child.skeleton.bones[8].rotation.z = bones.bone8;
          }
        });
        requestAnimationFrame(render);
        renderer.render(scene, camera);
      }

      render();
    </script>
  </body>
</html>
