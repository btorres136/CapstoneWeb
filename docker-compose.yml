# Use postgres/example user/password credentials
version: '3.8'
services:
  db:
    image: postgres
    restart: always
    volumes:
      - ./server/docker-data/db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:${POSTGRES_PORT}
  adminer:
    depends_on: 
      - db
    image: adminer
    restart: always
    ports:
      - 8080:${ADMINER_PORT}
  restapi:
    image: spinewebserver
    build: ./server/
    restart: on-failure
    depends_on: 
      - db
    volumes:
      - ./server:/usr/src/app:cached
      - npm_cache_rest:/root/.npm:delegated
      - node_modules_rest:/usr/src/app/node_modules:delegated
    ports:
      - 3030:${APP_PORT}
    environment: 
      APP_PORT: ${APP_PORT}
      SECURITY_ALGORITHM: ${SECURITY_ALGORITHM}
      POSTGRES_PORT: ${POSTGRES_PORT}
      ADMINER_PORT: ${ADMINER_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      USERNAME_FIELD: ${USERNAME_FIELD}
      PASSWORD_FIELD: ${PASSWORD_FIELD}
  frontend:
    image: spinewebfrontend
    build: ./frontend/
    restart: on-failure
    depends_on: 
      - restapi
    volumes:
      - ./frontend:/usr/src/app:cached
      - npm_cache_frontend:/root/.npm:delegated
      - node_modules_frontend:/usr/src/app/node_modules:delegated
    ports:
      - 3000:${FRONTEND_PORT}
    stdin_open: true
  reverse_proxy:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on: 
      - restapi
      - frontend
      - db
      - adminer
volumes:
  npm_cache_rest:
  node_modules_rest:
  npm_cache_frontend:
  node_modules_frontend: